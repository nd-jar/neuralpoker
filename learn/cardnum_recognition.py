# -*- coding: utf-8 -*-
"""cardnum-recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O_sVDKa_P2vqGpDD8HAwz6UAGb0NQIPg
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

# Step 1: Data Preparation
data = pd.read_csv('data_nums.csv', delimiter='\t', header=None)
X = data.iloc[:, :-1].values  # Features (bit arrays)
y = data.iloc[:, -1].values   # Labels (card names)

# Normalize input features
# X = X / np.max(X, axis=0)
# Convert labels to one-hot encoding
classes = np.unique(y)
print(classes)
num_classes = len(classes)
y_one_hot = np.zeros((len(y), num_classes))
for i, cls in enumerate(classes):
    y_one_hot[y == cls, i] = 1

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_one_hot, test_size=0.2, random_state=42)

image_index = 0  # Change this index to visualize different images from X_test
image_data_flattened = X[image_index]

# Step 2: Reshape the flattened data into the original image dimensions
image_data = image_data_flattened.reshape(13, 17)

# Step 3: Display the image
plt.imshow(image_data, cmap='gray')  # Use 'gray' colormap for grayscale images
plt.axis('off')  # Turn off axis
plt.show()

def sigmoid(x):
    return 1 / (1 + np.exp(-x))
# Derivative of the sigmoid function
def sigmoid_derivative(x):
    s = sigmoid(x)
    return s * (1 - s)
def relu(x):
    return np.maximum(0, x)

# Derivative of the ReLU function
def relu_derivative(x):
    return np.where(x > 0, 1, 0)

# Step 2: Define architecture and initialize weights and biases
input_size = X.shape[1]
hidden_size = 128  # Number of neurons in the hidden layer
output_size = num_classes
# Initialize weights and biases
np.random.seed(42)  # for reproducibility
W1 = np.random.randn(input_size, hidden_size)  # Weight matrix for input to hidden layer
b1 = np.zeros((1, hidden_size))  # Bias for hidden layer
W2 = np.random.randn(hidden_size, output_size)  # Weight matrix for hidden to output layer
b2 = np.zeros((1, output_size))  # Bias for output layer

# Step 3: Training the neural network
epochs = 1500;
learning_rate = 0.01

for epoch in range(epochs):
    # Forward pass for training data
    z1 = np.dot(X_train, W1) + b1
    a1 = relu(z1)
    z2 = np.dot(a1, W2) + b2
    a2 = sigmoid(z2)

    # Calculate loss (MSE)
    loss = np.mean(np.square(a2 - y_train))

    # Backpropagation
    dA2 = 2 * (a2 - y_train) / len(X_train)
    dZ2 = dA2 * sigmoid_derivative(a2)
    dW2 = np.dot(a1.T, dZ2)
    db2 = np.sum(dZ2, axis=0, keepdims=True)

    dA1 = np.dot(dZ2, W2.T)
    dZ1 = dA1 * relu_derivative(a1)
    dW1 = np.dot(X_train.T, dZ1)
    db1 = np.sum(dZ1, axis=0, keepdims=True)

    # Update weights and biases
    W1 -= learning_rate * dW1
    b1 -= learning_rate * db1
    W2 -= learning_rate * dW2
    b2 -= learning_rate * db2

    # Print loss every 100 epochs
    if epoch % 100 == 0:
        print(f"Epoch {epoch}, Loss: {loss}")

## Step 4: Model Evaluation
# Forward pass for test data
z1_test = np.dot(X_test, W1) + b1
a1_test = relu(z1_test)
z2_test = np.dot(a1_test, W2) + b2
a2_test = sigmoid(z2_test)

# Predicted labels for test data
predicted_labels_test = np.argmax(a2_test, axis=1)

# Converting one-hot encoded labels back to original labels
y_test_original = np.argmax(y_test, axis=1)

# Calculating accuracy
accuracy = accuracy_score(y_test_original, predicted_labels_test)
print("Accuracy:", accuracy)

np.savetxt('W1.txt', W1, fmt='%f')
np.savetxt('W2.txt', W2, fmt='%f')
np.savetxt('b1.txt', b1, fmt='%f')
np.savetxt('b2.txt', b2, fmt='%f')
print(W1.shape)
print(W2.shape)
print(b1.shape)
print(b2.shape)
print(classes)

test1_x = np.array([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0])
image_data = test1_x.reshape(13, 17)

# Step 3: Display the image
plt.imshow(image_data, cmap='gray')  # Use 'gray' colormap for grayscale images
plt.axis('off')  # Turn off axis
plt.show()
test_z1 = np.dot(test1_x, W1) + b1
# print(test_z1);
test_a1 = relu(test_z1)
# print(test_a1);
test_z2 = np.dot(test_a1, W2) + b2
# print(test_z2);
test_a2 = sigmoid(test_z2)
# print(test_a2);
print(test_a2)
print(np.argmax(test_a2, axis=1))
print(classes[np.argmax(test_a2, axis=1)])
print(classes)
print(learning_rate)